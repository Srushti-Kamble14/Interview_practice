** Coin Combination 2 **

/*
REACT

1) R - Repeat
. In this ques the given is n(number of coins), x(sum of money) and coins(array of coins present) 
. we have to find the number of distinct ordered ways to produce the value x 
. we can take the coins infinite number of times.

2) E - Example

Suppose n=3 , x=9 and coins=[2,3,5]

if we take 1st and 2nd coin then possibilty is 
2+2+2+3
if we take 1st and 3rd coin then possibilty is 
2+2+5
if we take 2nd coin then possibilty is 
3+3+3

(NOTE - in this question we dont repeat the value if picked once it should be distinct)
TOTAL WAYS - 3

3) A - Algorithm

. here we maintain two variable to find which coin to be pick and not pick
. the notPick variable will not pick the coin and move to next index
. the pick variable pick the currrent coin only when it is less than the x
. if coin picked then we will substract the value from x
. we do this process recursively until then x becomes 0 
. if x==0 then will return pick+notpick(the number of distinct ways)

4) C- Code
#include<bits/stdc++.h>
using namespace std;

int CoinCombinations2(int idx,int n,int x,vector<int>&coins){
    if(x==0) return 1;
    if(idx==n) return 0;
    
    //notpick
    int notpick=CoinCombinations2(idx+1,n,x,coins);

    //pick
    int pick=0;
    if(coins[idx]<=x){
        pick=CoinCombinations2(idx,n,x-coins[idx],coins);
    }

    return pick+notpick;
}

int main(){
    int n,x;
    cin>>n>>x;
    vector<int>coins(n);
    for(int i=0;i<n;i++) cin>>coins[i];

    cout<<CoinCombinations2(0,n,x,coins);
}

T - Testcase
TIME LIMIT EXCEEDED 


*/
